<?php

namespace STX\CroissantsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * Friday_SubscriptionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Friday_SubscriptionsRepository extends EntityRepository
{
	
	public function getUserForDay($date) {
		
		$queryBuilder = $this->_em->createQueryBuilder()
									->select('fs')
									->from($this->_entityName, 'fs')
									->where($predicates);
		;
	}
	
	public function getStatsForFridaySubscriptionsOverYear() {
		
		$rsm = new ResultSetMapping();
		$rsm->addEntityResult('STX\CroissantsBundle\Entity\Friday_Subscriptions', 'fs' );
		$rsm->addFieldResult('fs', 'confirmation_user_id', 'id');
		$rsm->addScalarResult('first', 'first');
		$rsm->addScalarResult('last', 'last');
		$rsm->addScalarResult('total', 'total');
		$rsm->addScalarResult('timepassed', 'timepassed');
		$rsm->addScalarResult('idletime', 'idletime');
		$rsm->addJoinedEntityResult('STX\UserBundle\Entity\User', 'cu' , 'fs', 'confirmation_user');
		$rsm->addFieldResult('cu', 'id', 'id');
		$rsm->addFieldResult('cu', 'username', 'username');
		
		$sql = 'select fs.confirmation_user_id, min(fs.date) as first, max(fs.date) as last, cu.id, cu.username, ' 
				.'	count(*) as total, datediff(now(), min(fs.date)) as timepassed, ' 
				.'	round(datediff(now(),  min(fs.date)) / count(*)) as idletime'
				.'	from friday_subscriptions fs '
				.'	inner join croissants_user cu on cu.id = fs.confirmation_user_id '
				.'	where fs.date between DATE_SUB(CURDATE(), interval 365 day) and CURDATE() '
				. '	group by cu.username '
				. '	order by total desc'
				;
		
		$query = $this->_em->createNativeQuery($sql, $rsm);
		
		$stats = $query->getResult();
		
		return $stats;
	}
	
	public function getStatsForFridaySubscriptionsOverDate($date) {
		if (is_null($date)) {
			return getStatsForFridaySubscriptionsOverYear();
		} else {
			return null;
		}
	}
	
	public function getUsersList() {
		
		$rsm = new ResultSetMapping();
		
		$rsm->addEntityResult('STX\UserBundle\Entity\User', 'cu');
		
		$rsm->addScalarResult('cu_usr', 'cu_usr');
		
		$sql = "select cu.username as cu_usr from croissants_user cu where cu.enabled = 1 and cu.roles = 'a:0:{}' order by cu.username";
		
		$query = $this->_em->createNativeQuery($sql, $rsm);
		
		$croissantsusers = $query->getResult();
		
		return $croissantsusers;
		
	}
	
}
